// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.models.generated.VpnOnDemandRuleConnectionAction;
import com.microsoft.graph.models.generated.VpnOnDemandRuleConnectionDomainAction;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Vpn On Demand Rule.
 */
public class VpnOnDemandRule implements IJsonBackedObject {

    /** the OData type of the object as returned by the service */
    @SerializedName("@odata.type")
    @Expose
    @Nullable
    public String oDataType;

    private transient AdditionalDataManager additionalDataManager = new AdditionalDataManager(this);

    @Override
    @Nonnull
    public final AdditionalDataManager additionalDataManager() {
        return additionalDataManager;
    }

    /**
     * The Action.
     * Action.
     */
    @SerializedName(value = "action", alternate = {"Action"})
    @Expose
	@Nullable
    public VpnOnDemandRuleConnectionAction action;

    /**
     * The Dns Search Domains.
     * DNS Search Domains.
     */
    @SerializedName(value = "dnsSearchDomains", alternate = {"DnsSearchDomains"})
    @Expose
	@Nullable
    public java.util.List<String> dnsSearchDomains;

    /**
     * The Domain Action.
     * Domain Action (Only applicable when Action is evaluate connection).
     */
    @SerializedName(value = "domainAction", alternate = {"DomainAction"})
    @Expose
	@Nullable
    public VpnOnDemandRuleConnectionDomainAction domainAction;

    /**
     * The Domains.
     * Domains (Only applicable when Action is evaluate connection).
     */
    @SerializedName(value = "domains", alternate = {"Domains"})
    @Expose
	@Nullable
    public java.util.List<String> domains;

    /**
     * The Probe Required Url.
     * Probe Required Url (Only applicable when Action is evaluate connection and DomainAction is connect if needed).
     */
    @SerializedName(value = "probeRequiredUrl", alternate = {"ProbeRequiredUrl"})
    @Expose
	@Nullable
    public String probeRequiredUrl;

    /**
     * The Probe Url.
     * A URL to probe. If this URL is successfully fetched (returning a 200 HTTP status code) without redirection, this rule matches.
     */
    @SerializedName(value = "probeUrl", alternate = {"ProbeUrl"})
    @Expose
	@Nullable
    public String probeUrl;

    /**
     * The Ssids.
     * Network Service Set Identifiers (SSIDs).
     */
    @SerializedName(value = "ssids", alternate = {"Ssids"})
    @Expose
	@Nullable
    public java.util.List<String> ssids;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    @Nullable
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
	@Override
    @Nullable
    public ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;

    }
}
