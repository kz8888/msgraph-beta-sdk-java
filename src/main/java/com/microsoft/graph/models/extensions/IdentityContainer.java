// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.models.extensions.ConditionalAccessRoot;
import com.microsoft.graph.models.extensions.B2cIdentityUserFlow;
import com.microsoft.graph.models.extensions.B2xIdentityUserFlow;
import com.microsoft.graph.models.extensions.IdentityUserFlowAttribute;
import com.microsoft.graph.models.extensions.IdentityUserFlow;
import com.microsoft.graph.models.extensions.ContinuousAccessEvaluationPolicy;
import com.microsoft.graph.requests.extensions.B2cIdentityUserFlowCollectionPage;
import com.microsoft.graph.requests.extensions.B2xIdentityUserFlowCollectionPage;
import com.microsoft.graph.requests.extensions.IdentityUserFlowAttributeCollectionPage;
import com.microsoft.graph.requests.extensions.IdentityUserFlowCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Identity Container.
 */
public class IdentityContainer implements IJsonBackedObject {

    /** the OData type of the object as returned by the service */
    @SerializedName("@odata.type")
    @Expose
    @Nullable
    public String oDataType;

    private transient AdditionalDataManager additionalDataManager = new AdditionalDataManager(this);

    @Override
    @Nonnull
    public final AdditionalDataManager additionalDataManager() {
        return additionalDataManager;
    }

    /**
     * The Conditional Access.
     * 
     */
    @SerializedName(value = "conditionalAccess", alternate = {"ConditionalAccess"})
    @Expose
	@Nullable
    public ConditionalAccessRoot conditionalAccess;

    /**
     * The B2c User Flows.
     * 
     */
    @SerializedName(value = "b2cUserFlows", alternate = {"B2cUserFlows"})
    @Expose
	@Nullable
    public B2cIdentityUserFlowCollectionPage b2cUserFlows;

    /**
     * The B2x User Flows.
     * 
     */
    @SerializedName(value = "b2xUserFlows", alternate = {"B2xUserFlows"})
    @Expose
	@Nullable
    public B2xIdentityUserFlowCollectionPage b2xUserFlows;

    /**
     * The User Flow Attributes.
     * 
     */
    @SerializedName(value = "userFlowAttributes", alternate = {"UserFlowAttributes"})
    @Expose
	@Nullable
    public IdentityUserFlowAttributeCollectionPage userFlowAttributes;

    /**
     * The User Flows.
     * 
     */
    @SerializedName(value = "userFlows", alternate = {"UserFlows"})
    @Expose
	@Nullable
    public IdentityUserFlowCollectionPage userFlows;

    /**
     * The Continuous Access Evaluation Policy.
     * 
     */
    @SerializedName(value = "continuousAccessEvaluationPolicy", alternate = {"ContinuousAccessEvaluationPolicy"})
    @Expose
	@Nullable
    public ContinuousAccessEvaluationPolicy continuousAccessEvaluationPolicy;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    @Nullable
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
	@Override
    @Nullable
    public ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("b2cUserFlows")) {
            b2cUserFlows = serializer.deserializeObject(json.get("b2cUserFlows").toString(), B2cIdentityUserFlowCollectionPage.class);
        }

        if (json.has("b2xUserFlows")) {
            b2xUserFlows = serializer.deserializeObject(json.get("b2xUserFlows").toString(), B2xIdentityUserFlowCollectionPage.class);
        }

        if (json.has("userFlowAttributes")) {
            userFlowAttributes = serializer.deserializeObject(json.get("userFlowAttributes").toString(), IdentityUserFlowAttributeCollectionPage.class);
        }

        if (json.has("userFlows")) {
            userFlows = serializer.deserializeObject(json.get("userFlows").toString(), IdentityUserFlowCollectionPage.class);
        }
    }
}
